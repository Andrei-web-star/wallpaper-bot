import os
import math
import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ª–µ–∑–Ω–æ –Ω–∞ Render)
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("wallpaper-bot")

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–π (–ø—Ä–æ—Å—Ç–∞—è in‚Äëmemory) ===
user_data: dict[int, dict] = {}

# === –ö–Ω–æ–ø–∫–∞ ¬´—Å–±—Ä–æ—Å¬ª ===
def restart_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
        resize_keyboard=True
    )

# --- —É—Ç–∏–ª–∏—Ç—ã ---
def pf(s: str | None) -> float | None:
    """parse float —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø—è—Ç–æ–π –∏ —Ç—Ä–∏–º–æ–º –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not s:
        return None
    try:
        return float(s.strip().replace(",", "."))
    except ValueError:
        return None

def need_positive(m: Message, d: dict, key: str, value: float | None, prompt: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ value –≤–∞–ª–∏–¥–Ω–æ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –æ–∫ ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ."""
    if value is None or value <= 0:
        asyncio.create_task(m.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."))
        return False
    d[key] = value
    asyncio.create_task(m.answer(prompt))
    return True


# === –°—Ç–∞—Ä—Ç ===
@dp.message(CommandStart())
async def start(message: Message):
    user_data[message.chat.id] = {}
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–æ–µ–≤</b> üßÆ\n\n"
        "–ü–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä—É–ª–æ–Ω—ã —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç—ã, –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π.\n"
        "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏ <b>–≤ –º–µ—Ç—Ä–∞—Ö</b> (–¥—Ä–æ–±–Ω—ã–µ –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π).\n\n"
        "üëâ –£–∫–∞–∂–∏ <b>–¥–ª–∏–Ω—É</b> –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5</code>):",
        reply_markup=ReplyKeyboardRemove()
    )


# === –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤–≤–æ–¥–∞ ===
@dp.message()
async def flow(m: Message):
    c = m.chat.id
    t = (m.text or "").strip()

    # –°–±—Ä–æ—Å
    if t == "üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data[c] = {}
        await m.answer("üëâ –£–∫–∞–∂–∏ <b>–¥–ª–∏–Ω—É</b> –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5</code>):",
                       reply_markup=ReplyKeyboardRemove())
        return

    d = user_data.setdefault(c, {})

    try:
        # 1) –î–ª–∏–Ω–∞
        if "length" not in d:
            v = pf(t)
            if not need_positive(m, d, "length", v, "üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É</b> –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>3</code>):"):
                return
            return

        # 2) –®–∏—Ä–∏–Ω–∞ (—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –û–î–ò–ù —Ä–∞–∑)
        if "width" not in d:
            v = pf(t)
            if not need_positive(m, d, "width", v, "üëâ –£–∫–∞–∂–∏ <b>–≤—ã—Å–æ—Ç—É —Å—Ç–µ–Ω</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>2.7</code>):"):
                return
            return

        # 3) –í—ã—Å–æ—Ç–∞
        if "height" not in d:
            v = pf(t)
            if not need_positive(m, d, "height", v, "ü™ü –°–∫–æ–ª—å–∫–æ <b>–æ–∫–æ–Ω</b> –≤ –∫–æ–º–Ω–∞—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1</code>):"):
                return
            return

        # 4) –ö–æ–ª-–≤–æ –æ–∫–æ–Ω
        if "windows" not in d:
            try:
                count = int(float(t.replace(",", ".")))
                if count < 0:
                    raise ValueError
            except ValueError:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0, 1, 2).")
                return
            d["windows"] = count
            d["w_idx"] = 1
            d["w_dims"] = []  # [w1, h1, w2, h2, ...]
            if count == 0:
                await m.answer("üö™ –°–∫–æ–ª—å–∫–æ <b>–¥–≤–µ—Ä–µ–π</b>? (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1</code>):")
            else:
                await m.answer("üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞ ‚Ññ1</b> (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.2</code>")
            return

        # 5) –†–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω (–ø–æ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ–∫–Ω–æ)
        if len(d["w_dims"]) < d["windows"] * 2:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –º–µ—Ç—Ä–∞—Ö.")
                return
            d["w_dims"].append(v)
            # –µ—Å–ª–∏ –≤–≤–µ–ª–∏ —à–∏—Ä–∏–Ω—É ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –≤—ã—Å–æ—Ç—É; –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –≤—ã—Å–æ—Ç—É ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É/–∫ –¥–≤–µ—Ä—è–º
            if len(d["w_dims"]) % 2 == 1:
                await m.answer(f"üëâ –£–∫–∞–∂–∏ <b>–≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞ ‚Ññ{d['w_idx']}</b> (–º):")
            else:
                d["w_idx"] += 1
                if d["w_idx"] <= d["windows"]:
                    await m.answer(f"üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞ ‚Ññ{d['w_idx']}</b> (–º):")
                else:
                    await m.answer("üö™ –°–∫–æ–ª—å–∫–æ <b>–¥–≤–µ—Ä–µ–π</b>? (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1</code>):")
            return

        # 6) –ö–æ–ª-–≤–æ –¥–≤–µ—Ä–µ–π
        if "doors" not in d:
            try:
                count = int(float(t.replace(",", ".")))
                if count < 0:
                    raise ValueError
            except ValueError:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0, 1).")
                return
            d["doors"] = count
            d["d_idx"] = 1
            d["d_dims"] = []
            if count == 0:
                await m.answer("üìè –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É —Ä—É–ª–æ–Ω–∞</b> (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.53</code>")
            else:
                await m.answer("üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É –¥–≤–µ—Ä–∏ ‚Ññ1</b> (–º):")
            return

        # 7) –†–∞–∑–º–µ—Ä—ã –¥–≤–µ—Ä–µ–π
        if len(d["d_dims"]) < d["doors"] * 2:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –º–µ—Ç—Ä–∞—Ö.")
                return
            d["d_dims"].append(v)
            if len(d["d_dims"]) % 2 == 1:
                await m.answer(f"üëâ –£–∫–∞–∂–∏ <b>–≤—ã—Å–æ—Ç—É –¥–≤–µ—Ä–∏ ‚Ññ{d['d_idx']}</b> (–º):")
            else:
                d["d_idx"] += 1
                if d["d_idx"] <= d["doors"]:
                    await m.answer(f"üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É –¥–≤–µ—Ä–∏ ‚Ññ{d['d_idx']}</b> (–º):")
                else:
                    await m.answer("üìè –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É —Ä—É–ª–æ–Ω–∞</b> (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.53</code>")
            return

        # 8) –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞
        if "roll_w" not in d:
            v = pf(t)
            if not need_positive(m, d, "roll_w", v, "üìè –£–∫–∞–∂–∏ <b>–¥–ª–∏–Ω—É —Ä—É–ª–æ–Ω–∞</b> (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: 
<code>10.05</code>"):
                return
            return

        # 9) –î–ª–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞
        if "roll_l" not in d:
            v = pf(t)
            if not need_positive(m, d, "roll_l", v, "üîÅ –£–∫–∞–∂–∏ <b>—Ä–∞–ø–ø–æ—Ä—Ç</b> (–º). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî <code>0</code>:"):
                return
            return

        # 10) –†–∞–ø–ø–æ—Ä—Ç
        if "rapport" not in d:
            v = pf(t)
            if v is None or v < 0:
                await m.answer("‚ùå –†–∞–ø–ø–æ—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0.")
                return
            d["rapport"] = v

            # === –†–∞—Å—á—ë—Ç ===
            perim = 2 * (d["length"] + d["width"])
            wall_area = perim * d["height"]

            w_area = sum(d["w_dims"][i] * d["w_dims"][i + 1] for i in range(0, len(d["w_dims"]), 2))
            d_area = sum(d["d_dims"][i] * d["d_dims"][i + 1] for i in range(0, len(d["d_dims"]), 2))
            net_area = max(wall_area - w_area - d_area, 0.0)

            # —É—á—ë—Ç —Ä–∞–ø–ø–æ—Ä—Ç–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–ø–ø–æ—Ä—Ç –∫ –≤—ã—Å–æ—Ç–µ –æ—Ç—Ä–µ–∑–∞)
            strip_height = d["height"] + (d["rapport"] if d["rapport"] > 0 else 0)
            if strip_height <= 0 or d["roll_l"] <= 0 or d["roll_w"] <= 0:
                await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä—É–ª–æ–Ω–∞/–≤—ã—Å–æ—Ç—ã.")
                return

            strips_per_roll = int(d["roll_l"] // strip_height)
            if strips_per_roll < 1:
                await m.answer("‚ùå –ò–∑ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–ª–æ—Å—ã –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–ø–ø–æ—Ä—Ç–µ.")
                return

            strips_needed = math.ceil(perim / d["roll_w"])
            rolls_needed = math.ceil(strips_needed / strips_per_roll)

            await m.answer(
                "<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞:</b>\n\n"
                f"üß± –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω: <b>{wall_area:.2f} –º¬≤</b>\n"
                f"ü™ü –ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω: <b>{w_area:.2f} –º¬≤</b>\n"
                f"üö™ –ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π: <b>{d_area:.2f} –º¬≤</b>\n"
                f"üìê –ß–∏—Å—Ç–∞—è –ø–ª–æ—â–∞–¥—å –æ–∫–ª–µ–π–∫–∏: <b>{net_area:.2f} –º¬≤</b>\n\n"
                f"üìè –ü–æ–ª–æ—Å –Ω–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä: <b>{strips_needed}</b>\n"
                f"üéØ –ü–æ–ª–æ—Å –∏–∑ 1 —Ä—É–ª–æ–Ω–∞: <b>{strips_per_roll}</b>\n"
                f"üì¶ –ù—É–∂–Ω–æ —Ä—É–ª–æ–Ω–æ–≤: <b>{rolls_needed}</b>\n\n"
                "üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å +1 —Ä—É–ª–æ–Ω <i>–Ω–∞ –∑–∞–ø–∞—Å</i>.",
                reply_markup=restart_kb()
            )
            return

        # –µ—Å–ª–∏ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏ ‚Äî –∂–¥—ë–º –Ω–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        await m.answer("–ù–∞–∂–º–∏ ¬´üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç.", reply_markup=restart_kb())

    except Exception as e:
        log.exception("wallpaper flow error: %s", e)
        await m.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞–∂–º–∏ ¬´üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.", reply_markup=restart_kb())
        user_data[c] = {}


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    # –Ω–∞ –≤—Å—è–∫–∏–π –Ω–∞ Render –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
