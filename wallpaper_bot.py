import os
import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove
)

# --- —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("‚ùå –ù–µ—Ç BOT_TOKEN. –ó–∞–¥–∞–π –µ–≥–æ –≤ Render ‚Üí Environment.")

# --- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("wallpaper-bot")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ø–∞–º—è—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ---
user_data: dict[int, dict] = {}

def kb_restart() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
        resize_keyboard=True
    )

def pf(text: str) -> float | None:
    """float —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø—è—Ç–æ–π –∏ —Ç—Ä–∏–º–æ–º –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not text:
        return None
    try:
        return float(text.strip().replace(",", "."))
    except Exception:
        return None

@dp.message(CommandStart())
async def start(message: Message):
    user_data[message.chat.id] = {}
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–æ–µ–≤ üßÆ\n\n"
        "–ü–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä—É–ª–æ–Ω—ã —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç—ã, –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π.\n"
        "–í–≤–æ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö, –¥—Ä–æ–±–Ω—ã–µ –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π.",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("üëâ –î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 5.0):")

@dp.message()
async def flow(m: Message):
    c = m.chat.id
    t = (m.text or "").strip()

    if t == "üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data[c] = {}
        await m.answer("üëâ –î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã:")
        return

    d = user_data.setdefault(c, {})

    try:
        # –®–∞–≥–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        if "length" not in d:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 5.0")
                return
            d["length"] = v
            await m.answer("üëâ –®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 3.0):")
            return

        if "width" not in d:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 3.0")
                return
            d["width"] = v
            await m.answer("üëâ –í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä 2.6):")
            return

        if "height" not in d:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 2.6")
                return
            d["height"] = v
            await m.answer("ü™ü –°–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω? (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 0):")
            return

        if "windows" not in d:
            iv = pf(t)
            if iv is None or iv < 0 or int(iv) != iv:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ–∫–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 0")
                return
            d["windows"] = int(iv)
            d["window_areas"] = []
            d["w_idx"] = 1
            if d["windows"] == 0:
                await m.answer("üö™ –°–∫–æ–ª—å–∫–æ –¥–≤–µ—Ä–µ–π? (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            else:
                await m.answer(f"üëâ –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ ‚Ññ{d['w_idx']} (–º):")
            return

        # –°–±–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω (–ø–∞—Ä–∞–º–∏: —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)
        if len(d["window_areas"]) < d["windows"] * 2:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º)")
                return
            d["window_areas"].append(v)
            # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–≤–µ–ª–∏ —à–∏—Ä–∏–Ω—É ‚Äî —Å–ø—Ä–æ—Å–∏–º –≤—ã—Å–æ—Ç—É
            if len(d["window_areas"]) % 2 == 1:
                await m.answer(f"üëâ –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ ‚Ññ{d['w_idx']} (–º):")
            else:
                d["w_idx"] += 1
                if d["w_idx"] <= d["windows"]:
                    await m.answer(f"üëâ –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ ‚Ññ{d['w_idx']} (–º):")
                else:
                    await m.answer("üö™ –°–∫–æ–ª—å–∫–æ –¥–≤–µ—Ä–µ–π? (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            return

        if "doors" not in d:
            iv = pf(t)
            if iv is None or iv < 0 or int(iv) != iv:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–≤–µ—Ä–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 0")
                return
            d["doors"] = int(iv)
            d["door_areas"] = []
            d["d_idx"] = 1
            if d["doors"] == 0:
                await m.answer("üìè –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.53):")
            else:
                await m.answer(f"üëâ –®–∏—Ä–∏–Ω–∞ –¥–≤–µ—Ä–∏ ‚Ññ{d['d_idx']} (–º):")
            return

        # –°–±–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–≤–µ—Ä–µ–π
        if len(d["door_areas"]) < d["doors"] * 2:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º)")
                return
            d["door_areas"].append(v)
            if len(d["door_areas"]) % 2 == 1:
                await m.answer(f"üëâ –í—ã—Å–æ—Ç–∞ –¥–≤–µ—Ä–∏ ‚Ññ{d['d_idx']} (–º):")
            else:
                d["d_idx"] += 1
                if d["d_idx"] <= d["doors"]:
                    await m.answer(f"üëâ –®–∏—Ä–∏–Ω–∞ –¥–≤–µ—Ä–∏ ‚Ññ{d['d_idx']} (–º):")
                else:
                    await m.answer("üìè –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.53):")
            return

        if "roll_width" not in d:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.53")
                return
            d["roll_width"] = v
            await m.answer("üìè –î–ª–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 10.05):")
            return

        if "roll_length" not in d:
            v = pf(t)
            if v is None or v <= 0:
                await m.answer("‚ùå –î–ª–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 10.05")
                return
            d["roll_length"] = v
            await m.answer("üîÅ –†–∞–ø–ø–æ—Ä—Ç (0, 0.32, 0.64 –∏ —Ç.–ø.):")
            return

        if "rapport" not in d:
            v = pf(t)
            if v is None or v < 0:
                await m.answer("‚ùå –†–∞–ø–ø–æ—Ä—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                return
            d["rapport"] = v

            # ---- —Ä–∞—Å—á–µ—Ç ----
            perimeter = 2 * (d["length"] + d["width"])
            wall_area = perimeter * d["height"]

            window_area = sum(
                d["window_areas"][i] * d["window_areas"][i + 1]
                for i in range(0, len(d["window_areas"]), 2)
            )
            door_area = sum(
                d["door_areas"][i] * d["door_areas"][i + 1]
                for i in range(0, len(d["door_areas"]), 2)
            )

            net_area = wall_area - window_area - door_area

            strip_height = d["height"] + d["rapport"]
            if strip_height <= 0 or d["roll_width"] <= 0:
                await m.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")
                user_data[c] = {}
                return

            strips_per_roll = int(d["roll_length"] // strip_height)  # —Ü–µ–ª—ã—Ö –ø–æ–ª–æ—Å –∏–∑ —Ä—É–ª–æ–Ω–∞
            strips_needed = int(perimeter // d["roll_width"])        # —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–æ—Å –Ω–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä

            if strips_per_roll == 0:
                await m.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–ø–ø–æ—Ä—Ç/–≤—ã—Å–æ—Ç–∞ ‚Äî –∏–∑ —Ä—É–ª–æ–Ω–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ü–µ–ª–æ–π –ø–æ–ª–æ—Å—ã.")
                user_data[c] = {}
                return

            rolls_needed = (strips_needed + strips_per_roll - 1) // strips_per_roll  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

            await m.answer(
                "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
                f"‚Ä¢ –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω: <b>{wall_area:.2f} –º¬≤</b>\n"
                f"‚Ä¢ –ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω: <b>{window_area:.2f} –º¬≤</b>\n"
                f"‚Ä¢ –ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π: <b>{door_area:.2f} –º¬≤</b>\n"
                f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø–ª–æ—â–∞–¥—å –æ–∫–ª–µ–π–∫–∏: <b>{net_area:.2f} –º¬≤</b>\n"
                f"‚Ä¢ –ü–æ–ª–æ—Å –Ω—É–∂–Ω–æ: <b>{strips_needed}</b>\n"
                f"‚Ä¢ –†—É–ª–æ–Ω–æ–≤ (—Å —Ä–∞–ø–ø–æ—Ä—Ç–æ–º): <b>{rolls_needed}</b>\n\n"
                f"–°–æ–≤–µ—Ç: –≤–æ–∑—å–º–∏ –Ω–∞ 1 —Ä—É–ª–æ–Ω –±–æ–ª—å—à–µ ‚Äî –Ω–∞ –∑–∞–ø–∞—Å.",
                reply_markup=kb_restart(),
                parse_mode="HTML"
            )

            # —Å–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å —Å –¥–ª–∏–Ω—ã
            user_data[c] = {}
            return

        # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        await m.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞–∂–º–∏ ¬´üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.", reply_markup=kb_restart())

    except Exception as e:
        log.exception("flow error: %s", e)
        await m.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞–∂–º–∏ ¬´üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.", reply_markup=kb_restart())
        user_data[c] = {}

# --- –∑–∞–ø—É—Å–∫ ---
async def main():
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ —Å—Ç–æ—è–ª
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
