import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set! Please set it in Render Environment Variables.")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
    resize_keyboard=True
)

# –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø—è—Ç–æ–π –∏ —Ç–æ—á–∫–∏
def parse_float(value):
    try:
        return float(str(value).replace(",", "."))
    except ValueError:
        return None

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç–∞ –æ–±–æ–µ–≤ ü™Ñ\n"
        "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏ –≤ –º–µ—Ç—Ä–∞—Ö (–¥—Ä–æ–±–Ω—ã–µ –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π).",
        reply_markup=main_kb
    )
    user_data[message.chat.id] = {}
    await message.answer("üëâ –î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 5.0):")

@dp.message()
async def flow(message: Message):
    chat_id = message.chat.id
    text = (message.text or "").strip()

    # –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    if text == "üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data[chat_id] = {}
        await message.answer("üëâ –î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 5.0):")
        return

    d = user_data.setdefault(chat_id, {})

    def need(key, prompt, must_positive=True):
        value = parse_float(text)
        if value is None or (must_positive and value <= 0):
            asyncio.create_task(message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 5.0"))
            return False
        d[key] = value
        asyncio.create_task(message.answer(prompt))
        return True

    # –ü–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å
    if "length" not in d:
        if not need("length", "üëâ –®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 3.0):"):
            return
    elif "width" not in d:
        if not need("width", "üëâ –í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä 2.7):"):
            return
    elif "height" not in d:
        if not need("height", "üìè –°–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ?:", must_positive=False):
            return
    elif "windows" not in d:
        value = parse_float(text)
        if value is None or value < 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 2")
            return
        d["windows"] = int(value)
        await message.answer("üìè –°–∫–æ–ª—å–∫–æ –¥–≤–µ—Ä–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ?:")
    elif "doors" not in d:
        value = parse_float(text)
        if value is None or value < 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1")
            return
        d["doors"] = int(value)
        await message.answer("üìê –î–ª–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ –æ–±–æ–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä 10.0):")
    elif "roll_length" not in d:
        if not need("roll_length", "üìê –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ –æ–±–æ–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.53):"):
            return
    elif "roll_width" not in d:
        if not need("roll_width", "üîÑ –£–∫–∞–∂–∏ —Ä–∞–ø–ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä 0, 0.32 –∏–ª–∏ 0.64 ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 0):", 
must_positive=False):
            return
    elif "rapport" not in d:
        if not need("rapport", "‚úÖ –°—á–∏—Ç–∞—é..."):
            return

        # --- –†–∞—Å—á—ë—Ç ---
        length = d["length"]
        width = d["width"]
        height = d["height"]
        windows = d["windows"]
        doors = d["doors"]
        roll_length = d["roll_length"]
        roll_width = d["roll_width"]
        rapport = d["rapport"]

        # –ü–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã
        perimeter = 2 * (length + width)
        wall_area = perimeter * height

        # –í—ã—á–∏—Ç–∞–µ–º –æ–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
        wall_area -= windows * (1.5 * 1.2)
        wall_area -= doors * (2.0 * 0.8)

        # –ö–æ–ª-–≤–æ –ø–æ–ª–æ—Å –∏–∑ —Ä—É–ª–æ–Ω–∞
        if rapport > 0:
            effective_height = height + (rapport - height % rapport if height % rapport != 0 else 0)
        else:
            effective_height = height

        strips_per_roll = int(roll_length // effective_height)
        strip_width_area = roll_width * effective_height
        total_strips_needed = wall_area / (roll_width * effective_height)
        rolls_needed = int((total_strips_needed / strips_per_roll) + 0.9999)

        await message.answer(
            f"üìä –î–ª—è –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ: <b>{rolls_needed}</b> —Ä—É–ª–æ–Ω–æ–≤ –æ–±–æ–µ–≤.\n"
            f"üìù –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∑—è—Ç—å —Å –∑–∞–ø–∞—Å–æ–º 1 —Ä—É–ª–æ–Ω.",
            reply_markup=main_kb
        )

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
