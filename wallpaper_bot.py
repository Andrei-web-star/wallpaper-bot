import os, math, asyncio, logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("wallpaper-bot")

# –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏–º)
BOT_TOKEN = os.environ["BOT_TOKEN"]

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_data: dict[int, dict] = {}

def kb_restart():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
        resize_keyboard=True
    )

def pf(x: str) -> float | None:
    try:
        return float(x.strip().replace(",", "."))
    except Exception:
        return None

@dp.message(CommandStart())
async def start(m: Message):
    user_data[m.chat.id] = {}
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–æ–µ–≤ üßÆ\n"
        "–ü–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä—É–ª–æ–Ω—ã —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç—ã, –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π.\n"
        "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏ –≤ –º–µ—Ç—Ä–∞—Ö (–¥—Ä–æ–±–Ω—ã–µ –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π).",
        reply_markup=ReplyKeyboardRemove()
    )
    await m.answer("üëâ –î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 5.0):")

@dp.message()
async def flow(m: Message):
    c = m.chat.id
    t = (m.text or "").strip()

    if t == "üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data[c] = {}
        await m.answer("üëâ –î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã:")
        return

    d = user_data.setdefault(c, {})

    try:
        def need(key, prompt, must_positive=True):
            v = pf(t)
            if v is None or (must_positive and v <= 0) or ((not must_positive) and v < 0):
                asyncio.create_task(m.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."))
                return False
            d[key] = v
            asyncio.create_task(m.answer(prompt))
            return True

        if "length" not in d and need("length", "üëâ –®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã:"): return
        if "width" not in d and need("width", "üß± –í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω:"): return
        if "height" not in d and need("height", "ü™ü –°–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω? (–º–æ–∂–Ω–æ 0):"): return

        if "windows" not in d:
            v = pf(t)
            if v is None or v < 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0")
                return
            d["windows"] = int(v); d["wi"] = 1; d["w"] = []
            if d["windows"] == 0:
                await m.answer("üö™ –°–∫–æ–ª—å–∫–æ –¥–≤–µ—Ä–µ–π? (–º–æ–∂–Ω–æ 0):")
            else:
                await m.answer("üëâ –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ ‚Ññ1:")
            return

        if len(d["w"]) < d["windows"] * 2:
            v = pf(t)
            if v is None or v < 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0")
                return
            d["w"].append(v)
            if len(d["w"]) % 2 == 1:
                await m.answer(f"üëâ –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ ‚Ññ{d['wi']}:")
            else:
                d["wi"] += 1
                if d["wi"] <= d["windows"]:
                    await m.answer("üëâ –®–∏—Ä–∏–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∫–Ω–∞:")
                else:
                    await m.answer("üö™ –°–∫–æ–ª—å–∫–æ –¥–≤–µ—Ä–µ–π? (–º–æ–∂–Ω–æ 0):")
            return

        if "doors" not in d:
            v = pf(t)
            if v is None or v < 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0")
                return
            d["doors"] = int(v); d["di"] = 1; d["d"] = []
            if d["doors"] == 0:
                await m.answer("üìè –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–º):")
            else:
                await m.answer("üëâ –®–∏—Ä–∏–Ω–∞ –¥–≤–µ—Ä–∏ ‚Ññ1:")
            return

        if len(d["d"]) < d["doors"] * 2:
            v = pf(t)
            if v is None or v < 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0")
                return
            d["d"].append(v)
            if len(d["d"]) % 2 == 1:
                await m.answer(f"üëâ –í—ã—Å–æ—Ç–∞ –¥–≤–µ—Ä–∏ ‚Ññ{d['di']}:")
            else:
                d["di"] += 1
                if d["di"] <= d["doors"]:
                    await m.answer("üëâ –®–∏—Ä–∏–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –¥–≤–µ—Ä–∏:")
                else:
                    await m.answer("üìè –®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–º):")
            return

        if "roll_w" not in d and need("roll_w", "üìè –î–ª–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–º):"): return
        if "roll_l" not in d and need("roll_l", "üîÅ –†–∞–ø–ø–æ—Ä—Ç (–º). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî 0.0:", must_positive=True): return

        if "rapport" not in d:
            v = pf(t)
            if v is None or v < 0:
                await m.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0")
                return
            d["rapport"] = v

            L, W, H = d["length"], d["width"], d["height"]
            per = 2 * (L + W)
            wall = per * H

            win = sum(d["w"][i] * d["w"][i+1] for i in range(0, len(d["w"]), 2)) if d["w"] else 0.0
            drs = sum(d["d"][i] * d["d"][i+1] for i in range(0, len(d["d"]), 2)) if d["d"] else 0.0
            net = max(0.0, wall - win - drs)

            rap = d["rapport"]
            drop_h = math.ceil(H / rap) * rap if rap > 0 else H

            strips_per_roll = int(d["roll_l"] // drop_h)
            if strips_per_roll <= 0:
                await m.answer("‚ùóÔ∏è–ò–∑ —Ä—É–ª–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–ª–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                               reply_markup=kb_restart())
                user_data[c] = {}
                return

            strips_needed = math.ceil(per / d["roll_w"])
            rolls = math.ceil(strips_needed / strips_per_roll)

            await m.answer(
                "‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>\n"
                f"üß± –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω: <b>{wall:.2f} –º¬≤</b>\n"
                f"ü™ü –û–∫–Ω–∞: <b>{win:.2f} –º¬≤</b> ‚Ä¢ üö™ –î–≤–µ—Ä–∏: <b>{drs:.2f} –º¬≤</b>\n"
                f"üìê –ß–∏—Å—Ç–∞—è –ø–ª–æ—â–∞–¥—å: <b>{net:.2f} –º¬≤</b>\n\n"
                f"üìè –í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Å—ã: <b>{drop_h:.2f} –º</b>, –∏–∑ —Ä—É–ª–æ–Ω–∞: <b>{strips_per_roll}</b>\n"
                f"üìè –ü–æ–ª–æ—Å –Ω—É–∂–Ω–æ: <b>{strips_needed}</b>\n"
                f"üì¶ –†—É–ª–æ–Ω–æ–≤: <b>{rolls}</b>\n\n"
                f"üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å +1 —Ä—É–ª–æ–Ω –Ω–∞ –∑–∞–ø–∞—Å.",
                reply_markup=kb_restart()
            )
            return

    except Exception as e:
        log.exception("flow error: %s", e)
        await m.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞–∂–º–∏ ¬´–ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.", reply_markup=kb_restart())

async def main():
    # —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
