# wallpaper_bot.py
import os
import math
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
TOKEN = os.environ.get("BOT_TOKEN", "").strip()
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ Render.")

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def kb_restart() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
        resize_keyboard=True
    )

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è =====
class S(StatesGroup):
    length = State()
    width = State()
    height = State()
    windows = State()
    window_dim = State()
    doors = State()
    door_dim = State()
    roll_width = State()
    roll_length = State()
    rapport = State()

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def pfloat(t: str) -> float | None:
    try:
        return float((t or "").replace(",", "."))
    except Exception:
        return None

def pint_nonneg(t: str) -> int | None:
    try:
        v = int(str(t).strip())
        return v if v >= 0 else None
    except Exception:
        return None

async def ask(m: Message, text: str, remove_kb: bool = False):
    await m.answer(text, reply_markup=(ReplyKeyboardRemove() if remove_kb else None))

# ===== –°—Ç–∞—Ä—Ç =====
@dp.message(CommandStart())
async def start(m: Message, state: FSMContext):
    await state.clear()
    await ask(m,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–æ–µ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–°</b> üßÆ\n\n"
        "–ü–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä—É–ª–æ–Ω—ã —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç—ã, –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π.\n"
        "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏ <b>–≤ –º–µ—Ç—Ä–∞—Ö</b> (–¥—Ä–æ–±–Ω—ã–µ –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π).",
        remove_kb=True
    )
    await ask(m, "üëâ –£–∫–∞–∂–∏ <b>–¥–ª–∏–Ω—É</b> –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5</code>):")
    await state.set_state(S.length)

@dp.message(F.text == "üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart(m: Message, state: FSMContext):
    await start(m, state)

# ===== –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ =====
@dp.message(S.length)
async def get_length(m: Message, state: FSMContext):
    v = pfloat(m.text)
    if not v or v <= 0:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: <code>5</code>")
    await state.update_data(length=v)
    await ask(m, "üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É</b> –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>3</code>):")
    await state.set_state(S.width)

@dp.message(S.width)
async def get_width(m: Message, state: FSMContext):
    v = pfloat(m.text)
    if not v or v <= 0:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: <code>3</code>")
    await state.update_data(width=v)
    await ask(m, "üëâ –£–∫–∞–∂–∏ <b>–≤—ã—Å–æ—Ç—É —Å—Ç–µ–Ω</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>2.7</code>):")
    await state.set_state(S.height)

@dp.message(S.height)
async def get_height(m: Message, state: FSMContext):
    v = pfloat(m.text)
    if not v or v <= 0:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: <code>2.7</code>")
    await state.update_data(height=v)
    await ask(m, "ü™ü –°–∫–æ–ª—å–∫–æ <b>–æ–∫–æ–Ω</b> –≤ –∫–æ–º–Ω–∞—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1</code>, –º–æ–∂–Ω–æ <code>0</code>):")
    await state.set_state(S.windows)

@dp.message(S.windows)
async def get_windows(m: Message, state: FSMContext):
    n = pint_nonneg(m.text)
    if n is None:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0. –ü—Ä–∏–º–µ—Ä: <code>1</code>")
    await state.update_data(windows=n, window_idx=1, window_dims=[])
    if n == 0:
        await ask(m, "üö™ –°–∫–æ–ª—å–∫–æ <b>–¥–≤–µ—Ä–µ–π</b> –≤ –∫–æ–º–Ω–∞—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1</code>, –º–æ–∂–Ω–æ <code>0</code>):")
        return await state.set_state(S.doors)
    await ask(m, f"üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É</b> –æ–∫–Ω–∞ ‚Ññ{1} (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.2</code>")
    await state.set_state(S.window_dim)

@dp.message(S.window_dim)
async def get_window_dim(m: Message, state: FSMContext):
    data = await state.get_data()
    idx = int(data["window_idx"])
    dims: list[float] = list(data["window_dims"])
    v = pfloat(m.text)
    if not v or v <= 0:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.2</code>")

    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω–∞ ‚Äî –∂–¥—ë–º –≤—ã—Å–æ—Ç—É
    if len(dims) % 2 == 0:
        dims.append(v)
        await state.update_data(window_dims=dims)
        return await ask(m, f"üëâ –£–∫–∞–∂–∏ <b>–≤—ã—Å–æ—Ç—É</b> –æ–∫–Ω–∞ ‚Ññ{idx} (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.3</code>")
    else:
        # –±—ã–ª–∞ —à–∏—Ä–∏–Ω–∞, –ø—Ä–∏—à–ª–∞ –≤—ã—Å–æ—Ç–∞ -> –æ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        dims.append(v)
        idx += 1
        await state.update_data(window_dims=dims, window_idx=idx)
        if idx <= data["windows"]:
            await ask(m, f"üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É</b> –æ–∫–Ω–∞ ‚Ññ{idx} (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.2</code>")
        else:
            await ask(m, "üö™ –°–∫–æ–ª—å–∫–æ <b>–¥–≤–µ—Ä–µ–π</b> –≤ –∫–æ–º–Ω–∞—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1</code>, –º–æ–∂–Ω–æ <code>0</code>):")
            await state.set_state(S.doors)

@dp.message(S.doors)
async def get_doors(m: Message, state: FSMContext):
    n = pint_nonneg(m.text)
    if n is None:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0. –ü—Ä–∏–º–µ—Ä: <code>1</code>")
    await state.update_data(doors=n, door_idx=1, door_dims=[])
    if n == 0:
        await ask(m, "üìè –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É —Ä—É–ª–æ–Ω–∞</b> –æ–±–æ–µ–≤ (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.53</code>:")
        return await state.set_state(S.roll_width)
    await ask(m, f"üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É</b> –¥–≤–µ—Ä–∏ ‚Ññ{1} (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.9</code>")
    await state.set_state(S.door_dim)

@dp.message(S.door_dim)
async def get_door_dim(m: Message, state: FSMContext):
    data = await state.get_data()
    idx = int(data["door_idx"])
    dims: list[float] = list(data["door_dims"])
    v = pfloat(m.text)
    if not v or v <= 0:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.9</code>")

    if len(dims) % 2 == 0:
        dims.append(v)
        await state.update_data(door_dims=dims)
        return await ask(m, f"üëâ –£–∫–∞–∂–∏ <b>–≤—ã—Å–æ—Ç—É</b> –¥–≤–µ—Ä–∏ ‚Ññ{idx} (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>2.0</code>")
    else:
        dims.append(v)
        idx += 1
        await state.update_data(door_dims=dims, door_idx=idx)
        if idx <= data["doors"]:
            await ask(m, f"üëâ –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É</b> –¥–≤–µ—Ä–∏ ‚Ññ{idx} (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.9</code>")
        else:
            await ask(m, "üìè –£–∫–∞–∂–∏ <b>—à–∏—Ä–∏–Ω—É —Ä—É–ª–æ–Ω–∞</b> –æ–±–æ–µ–≤ (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.53</code>:")
            await state.set_state(S.roll_width)

@dp.message(S.roll_width)
async def get_roll_w(m: Message, state: FSMContext):
    v = pfloat(m.text)
    if not v or v <= 0:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: <code>0.53</code>")
    await state.update_data(roll_width=v)
    await ask(m, "üìè –£–∫–∞–∂–∏ <b>–¥–ª–∏–Ω—É —Ä—É–ª–æ–Ω–∞</b> (–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>10.05</code>:")
    await state.set_state(S.roll_length)

@dp.message(S.roll_length)
async def get_roll_l(m: Message, state: FSMContext):
    v = pfloat(m.text)
    if not v or v <= 0:
        return await ask(m, "‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: <code>10.05</code>")
    await state.update_data(roll_length=v)
    await ask(m, "üîÅ –£–∫–∞–∂–∏ <b>—Ä–∞–ø–ø–æ—Ä—Ç</b> (–º). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏ <code>0</code>. –ü—Ä–∏–º–µ—Ä—ã: <code>0</code>, <code>0.32</code>, <code>0.64</code>:")
    await state.set_state(S.rapport)

# ===== –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç =====
@dp.message(S.rapport)
async def calc(m: Message, state: FSMContext):
    v = pfloat(m.text)
    if v is None or v < 0:
        return await ask(m, "‚ùå –†–∞–ø–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º ‚â• 0. –ü—Ä–∏–º–µ—Ä: <code>0.32</code>")
    d = await state.update_data(rapport=v)
    try:
        L = d["length"]
        W = d["width"]
        H = d["height"]
        perim = 2 * (L + W)
        wall_area = perim * H

        def sum_pairs(arr: list[float]) -> float:
            return sum(arr[i] * arr[i + 1] for i in range(0, len(arr), 2))

        window_area = sum_pairs(d.get("window_dims", []))
        door_area = sum_pairs(d.get("door_dims", []))
        net_area = max(wall_area - window_area - door_area, 0.0)

        roll_w = d["roll_width"]
        roll_l = d["roll_length"]
        rapport = d["rapport"]

        # –≤—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Å—ã —Å —É—á—ë—Ç–æ–º —Ä–∞–ø–ø–æ—Ä—Ç–∞ (–æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ –∫—Ä–∞—Ç–Ω–æ–π —Ä–∞–ø–ø–æ—Ä—Ç—É –≤–µ–ª–∏—á–∏–Ω—ã)
        if rapport and rapport > 0:
            strips_height = math.ceil(H / rapport) * rapport
        else:
            strips_height = H

        if strips_height <= 0 or roll_l < strips_height:
            return await m.answer(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Ä–µ–∑–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–ª–æ—Å—ã –∏–∑ —Ä—É–ª–æ–Ω–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å –∑–Ω–∞—á–µ–Ω–∏—è: –≤—ã—Å–æ—Ç–∞, –¥–ª–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ –∏ —Ä–∞–ø–ø–æ—Ä—Ç.",reply_markup=kb_restart()
            )

        strips_per_roll = int(roll_l // strips_height)
        strips_needed = math.ceil(perim / roll_w)
        rolls_needed = math.ceil(strips_needed / strips_per_roll)

        await m.answer(
            "‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞</b>\n\n"
            f"üß± –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω: <b>{wall_area:.2f} –º¬≤</b>\n"
            f"ü™ü –ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω: <b>{window_area:.2f} –º¬≤</b>\n"
            f"üö™ –ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π: <b>{door_area:.2f} –º¬≤</b>\n"
            f"üìê –ß–∏—Å—Ç–∞—è –ø–ª–æ—â–∞–¥—å –æ–∫–ª–µ–π–∫–∏: <b>{net_area:.2f} –º¬≤</b>\n\n"
            f"üìè –í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Å—ã (—Å —É—á—ë—Ç–æ–º —Ä–∞–ø–ø–æ—Ä—Ç–∞): <b>{strips_height:.2f} –º</b>\n"
            f"üßª –ü–æ–ª–æ—Å –∏–∑ —Ä—É–ª–æ–Ω–∞: <b>{strips_per_roll}</b>\n"
            f"üìë –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–æ—Å: <b>{strips_needed}</b>\n"
            f"üì¶ –†—É–ª–æ–Ω–æ–≤ –Ω—É–∂–Ω–æ: <b>{rolls_needed}</b>\n\n"
            f"‚ÑπÔ∏è –õ—É—á—à–µ –≤–∑—è—Ç—å –Ω–∞ <b>1 —Ä—É–ª–æ–Ω –±–æ–ª—å—à–µ</b> ‚Äî –Ω–∞ –∑–∞–ø–∞—Å.",
            reply_markup=kb_restart()
        )
    except Exception as e:
        await m.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞–∂–º–∏ ¬´üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.", reply_markup=kb_restart())
    finally:
        await state.clear()

# ===== –ó–∞–ø—É—Å–∫ (Render/–ª–æ–∫–∞–ª—å–Ω–æ) =====
async def main():
    # –ù–∞ –≤—Å—è–∫–∏–π: –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –±—ã–ª –≤–µ–±—Ö—É–∫ ‚Äî –æ—Ç–∫–ª—é—á–∏–º
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
